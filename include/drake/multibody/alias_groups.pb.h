// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: drake/multibody/alias_groups.proto

#ifndef PROTOBUF_drake_2fmultibody_2falias_5fgroups_2eproto__INCLUDED
#define PROTOBUF_drake_2fmultibody_2falias_5fgroups_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_drake_2fmultibody_2falias_5fgroups_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsAliasGroupImpl();
void InitDefaultsAliasGroup();
void InitDefaultsAliasGroupsImpl();
void InitDefaultsAliasGroups();
inline void InitDefaults() {
  InitDefaultsAliasGroup();
  InitDefaultsAliasGroups();
}
}  // namespace protobuf_drake_2fmultibody_2falias_5fgroups_2eproto
namespace drake {
namespace rigid_body_tree {
class AliasGroup;
class AliasGroupDefaultTypeInternal;
extern AliasGroupDefaultTypeInternal _AliasGroup_default_instance_;
class AliasGroups;
class AliasGroupsDefaultTypeInternal;
extern AliasGroupsDefaultTypeInternal _AliasGroups_default_instance_;
}  // namespace rigid_body_tree
}  // namespace drake
namespace drake {
namespace rigid_body_tree {

// ===================================================================

class AliasGroup : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:drake.rigid_body_tree.AliasGroup) */ {
 public:
  AliasGroup();
  virtual ~AliasGroup();

  AliasGroup(const AliasGroup& from);

  inline AliasGroup& operator=(const AliasGroup& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AliasGroup(AliasGroup&& from) noexcept
    : AliasGroup() {
    *this = ::std::move(from);
  }

  inline AliasGroup& operator=(AliasGroup&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AliasGroup& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AliasGroup* internal_default_instance() {
    return reinterpret_cast<const AliasGroup*>(
               &_AliasGroup_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(AliasGroup* other);
  friend void swap(AliasGroup& a, AliasGroup& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AliasGroup* New() const PROTOBUF_FINAL { return New(NULL); }

  AliasGroup* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AliasGroup& from);
  void MergeFrom(const AliasGroup& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AliasGroup* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string member = 2;
  int member_size() const;
  void clear_member();
  static const int kMemberFieldNumber = 2;
  const ::std::string& member(int index) const;
  ::std::string* mutable_member(int index);
  void set_member(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_member(int index, ::std::string&& value);
  #endif
  void set_member(int index, const char* value);
  void set_member(int index, const char* value, size_t size);
  ::std::string* add_member();
  void add_member(const ::std::string& value);
  #if LANG_CXX11
  void add_member(::std::string&& value);
  #endif
  void add_member(const char* value);
  void add_member(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& member() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_member();

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:drake.rigid_body_tree.AliasGroup)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> member_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_drake_2fmultibody_2falias_5fgroups_2eproto::TableStruct;
  friend void ::protobuf_drake_2fmultibody_2falias_5fgroups_2eproto::InitDefaultsAliasGroupImpl();
};
// -------------------------------------------------------------------

class AliasGroups : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:drake.rigid_body_tree.AliasGroups) */ {
 public:
  AliasGroups();
  virtual ~AliasGroups();

  AliasGroups(const AliasGroups& from);

  inline AliasGroups& operator=(const AliasGroups& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AliasGroups(AliasGroups&& from) noexcept
    : AliasGroups() {
    *this = ::std::move(from);
  }

  inline AliasGroups& operator=(AliasGroups&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AliasGroups& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AliasGroups* internal_default_instance() {
    return reinterpret_cast<const AliasGroups*>(
               &_AliasGroups_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(AliasGroups* other);
  friend void swap(AliasGroups& a, AliasGroups& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AliasGroups* New() const PROTOBUF_FINAL { return New(NULL); }

  AliasGroups* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AliasGroups& from);
  void MergeFrom(const AliasGroups& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AliasGroups* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .drake.rigid_body_tree.AliasGroup joint_group = 1;
  int joint_group_size() const;
  void clear_joint_group();
  static const int kJointGroupFieldNumber = 1;
  const ::drake::rigid_body_tree::AliasGroup& joint_group(int index) const;
  ::drake::rigid_body_tree::AliasGroup* mutable_joint_group(int index);
  ::drake::rigid_body_tree::AliasGroup* add_joint_group();
  ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >*
      mutable_joint_group();
  const ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >&
      joint_group() const;

  // repeated .drake.rigid_body_tree.AliasGroup body_group = 2;
  int body_group_size() const;
  void clear_body_group();
  static const int kBodyGroupFieldNumber = 2;
  const ::drake::rigid_body_tree::AliasGroup& body_group(int index) const;
  ::drake::rigid_body_tree::AliasGroup* mutable_body_group(int index);
  ::drake::rigid_body_tree::AliasGroup* add_body_group();
  ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >*
      mutable_body_group();
  const ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >&
      body_group() const;

  // @@protoc_insertion_point(class_scope:drake.rigid_body_tree.AliasGroups)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup > joint_group_;
  ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup > body_group_;
  friend struct ::protobuf_drake_2fmultibody_2falias_5fgroups_2eproto::TableStruct;
  friend void ::protobuf_drake_2fmultibody_2falias_5fgroups_2eproto::InitDefaultsAliasGroupsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AliasGroup

// optional string name = 1;
inline bool AliasGroup::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AliasGroup::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AliasGroup::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AliasGroup::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AliasGroup::name() const {
  // @@protoc_insertion_point(field_get:drake.rigid_body_tree.AliasGroup.name)
  return name_.GetNoArena();
}
inline void AliasGroup::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:drake.rigid_body_tree.AliasGroup.name)
}
#if LANG_CXX11
inline void AliasGroup::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:drake.rigid_body_tree.AliasGroup.name)
}
#endif
inline void AliasGroup::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:drake.rigid_body_tree.AliasGroup.name)
}
inline void AliasGroup::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:drake.rigid_body_tree.AliasGroup.name)
}
inline ::std::string* AliasGroup::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:drake.rigid_body_tree.AliasGroup.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AliasGroup::release_name() {
  // @@protoc_insertion_point(field_release:drake.rigid_body_tree.AliasGroup.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AliasGroup::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:drake.rigid_body_tree.AliasGroup.name)
}

// repeated string member = 2;
inline int AliasGroup::member_size() const {
  return member_.size();
}
inline void AliasGroup::clear_member() {
  member_.Clear();
}
inline const ::std::string& AliasGroup::member(int index) const {
  // @@protoc_insertion_point(field_get:drake.rigid_body_tree.AliasGroup.member)
  return member_.Get(index);
}
inline ::std::string* AliasGroup::mutable_member(int index) {
  // @@protoc_insertion_point(field_mutable:drake.rigid_body_tree.AliasGroup.member)
  return member_.Mutable(index);
}
inline void AliasGroup::set_member(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:drake.rigid_body_tree.AliasGroup.member)
  member_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AliasGroup::set_member(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:drake.rigid_body_tree.AliasGroup.member)
  member_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AliasGroup::set_member(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  member_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:drake.rigid_body_tree.AliasGroup.member)
}
inline void AliasGroup::set_member(int index, const char* value, size_t size) {
  member_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:drake.rigid_body_tree.AliasGroup.member)
}
inline ::std::string* AliasGroup::add_member() {
  // @@protoc_insertion_point(field_add_mutable:drake.rigid_body_tree.AliasGroup.member)
  return member_.Add();
}
inline void AliasGroup::add_member(const ::std::string& value) {
  member_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:drake.rigid_body_tree.AliasGroup.member)
}
#if LANG_CXX11
inline void AliasGroup::add_member(::std::string&& value) {
  member_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:drake.rigid_body_tree.AliasGroup.member)
}
#endif
inline void AliasGroup::add_member(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  member_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:drake.rigid_body_tree.AliasGroup.member)
}
inline void AliasGroup::add_member(const char* value, size_t size) {
  member_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:drake.rigid_body_tree.AliasGroup.member)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AliasGroup::member() const {
  // @@protoc_insertion_point(field_list:drake.rigid_body_tree.AliasGroup.member)
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AliasGroup::mutable_member() {
  // @@protoc_insertion_point(field_mutable_list:drake.rigid_body_tree.AliasGroup.member)
  return &member_;
}

// -------------------------------------------------------------------

// AliasGroups

// repeated .drake.rigid_body_tree.AliasGroup joint_group = 1;
inline int AliasGroups::joint_group_size() const {
  return joint_group_.size();
}
inline void AliasGroups::clear_joint_group() {
  joint_group_.Clear();
}
inline const ::drake::rigid_body_tree::AliasGroup& AliasGroups::joint_group(int index) const {
  // @@protoc_insertion_point(field_get:drake.rigid_body_tree.AliasGroups.joint_group)
  return joint_group_.Get(index);
}
inline ::drake::rigid_body_tree::AliasGroup* AliasGroups::mutable_joint_group(int index) {
  // @@protoc_insertion_point(field_mutable:drake.rigid_body_tree.AliasGroups.joint_group)
  return joint_group_.Mutable(index);
}
inline ::drake::rigid_body_tree::AliasGroup* AliasGroups::add_joint_group() {
  // @@protoc_insertion_point(field_add:drake.rigid_body_tree.AliasGroups.joint_group)
  return joint_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >*
AliasGroups::mutable_joint_group() {
  // @@protoc_insertion_point(field_mutable_list:drake.rigid_body_tree.AliasGroups.joint_group)
  return &joint_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >&
AliasGroups::joint_group() const {
  // @@protoc_insertion_point(field_list:drake.rigid_body_tree.AliasGroups.joint_group)
  return joint_group_;
}

// repeated .drake.rigid_body_tree.AliasGroup body_group = 2;
inline int AliasGroups::body_group_size() const {
  return body_group_.size();
}
inline void AliasGroups::clear_body_group() {
  body_group_.Clear();
}
inline const ::drake::rigid_body_tree::AliasGroup& AliasGroups::body_group(int index) const {
  // @@protoc_insertion_point(field_get:drake.rigid_body_tree.AliasGroups.body_group)
  return body_group_.Get(index);
}
inline ::drake::rigid_body_tree::AliasGroup* AliasGroups::mutable_body_group(int index) {
  // @@protoc_insertion_point(field_mutable:drake.rigid_body_tree.AliasGroups.body_group)
  return body_group_.Mutable(index);
}
inline ::drake::rigid_body_tree::AliasGroup* AliasGroups::add_body_group() {
  // @@protoc_insertion_point(field_add:drake.rigid_body_tree.AliasGroups.body_group)
  return body_group_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >*
AliasGroups::mutable_body_group() {
  // @@protoc_insertion_point(field_mutable_list:drake.rigid_body_tree.AliasGroups.body_group)
  return &body_group_;
}
inline const ::google::protobuf::RepeatedPtrField< ::drake::rigid_body_tree::AliasGroup >&
AliasGroups::body_group() const {
  // @@protoc_insertion_point(field_list:drake.rigid_body_tree.AliasGroups.body_group)
  return body_group_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rigid_body_tree
}  // namespace drake

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_drake_2fmultibody_2falias_5fgroups_2eproto__INCLUDED
